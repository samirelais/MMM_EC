import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
import sys
import json
from datetime import datetime, timedelta

# Ajouter le r√©pertoire parent au chemin Python
sys.path.append(os.path.abspath(".."))

# Importer les modules n√©cessaires
try:
   from src.data.online_retail_loader import OnlineRetailLoader
   from src.models.mmm_model import MMMModel
   from src.visualization.visualization import MMMVisualization
except ImportError as e:
   st.error(f"Erreur d'importation des modules: {e}")

# Configuration de la page
st.set_page_config(
   page_title="Dashboard Marketing Mix Modeling",
   page_icon="üìä",
   layout="wide",
   initial_sidebar_state="expanded"
)

# Titre de l'application
st.title("üìä Dashboard Marketing Mix Modeling")
st.write("Analyse et optimisation de l'attribution marketing bas√©e sur les donn√©es Online Retail")

# Fonction pour charger la configuration
@st.cache_data
def load_config():
   with open("../config/online_retail_config.json", "r") as f:
       return json.load(f)

# Fonction pour charger les r√©sultats du mod√®le
@st.cache_data
def load_results():
   try:
       # Charger les contributions
       contributions_df = pd.read_csv("../reports/channel_contributions.csv")
       
       # Charger l'allocation budg√©taire
       budget_df = pd.read_csv("../reports/budget_allocation.csv")
       
       # Charger les m√©triques
       with open("../reports/model_metrics.json", "r") as f:
           metrics = json.load(f)
       
       return contributions_df, budget_df, metrics
   except FileNotFoundError:
       st.warning("R√©sultats du mod√®le non trouv√©s. Veuillez d'abord ex√©cuter le script d'analyse MMM.")
       return None, None, None

# Charger la configuration
config = load_config()

# Sidebar pour la navigation
st.sidebar.title("Navigation")
page = st.sidebar.radio(
   "Choisir une page",
   ["Vue d'ensemble", "Analyse des contributions", "Allocation budg√©taire", "Simulateur", "√Ä propos"]
)

# Sidebar pour les informations
st.sidebar.title("Informations")
st.sidebar.info(
   """
   Ce dashboard pr√©sente les r√©sultats d'une analyse 
   de Marketing Mix Modeling (MMM) sur les donn√©es 
   Online Retail.
   
   **Source des donn√©es:** 
   [Kaggle - Online Retail Dataset](https://www.kaggle.com/datasets/vijayuv/onlineretail)
   """
)

# Tenter de charger les r√©sultats
contributions_df, budget_df, metrics = load_results()

if page == "Vue d'ensemble":
   st.header("Vue d'ensemble du projet MMM")
   
   col1, col2 = st.columns([2, 1])
   
   with col1:
       st.subheader("Qu'est-ce que le Marketing Mix Modeling?")
       st.write(
           """
           Le Marketing Mix Modeling (MMM) est une technique statistique qui analyse 
           l'impact des diff√©rentes activit√©s marketing sur les ventes. Elle permet de :
           
           - **Quantifier** l'efficacit√© de chaque canal marketing
           - **Mesurer** le retour sur investissement (ROI)
           - **Optimiser** l'allocation budg√©taire
           - **Pr√©voir** l'impact des futurs investissements marketing
           """
       )
       
       st.subheader("√Ä propos des donn√©es Online Retail")
       st.write(
           """
           Les donn√©es utilis√©es pour cette analyse proviennent du jeu de donn√©es 
           "Online Retail" disponible sur Kaggle. Il s'agit de donn√©es transactionnelles 
           d'un d√©taillant en ligne bas√© au Royaume-Uni, sp√©cialis√© dans les cadeaux.
           
           **Caract√©ristiques des donn√©es:**
           - P√©riode: D√©cembre 2010 √† D√©cembre 2011
           - ~500 000 transactions
           - ~4 000 clients uniques
           - ~4 000 produits uniques
           """
       )
   
   with col2:
       st.image("https://miro.medium.com/max/1200/1*6JgtnS-nglYMXmh32xqYxQ.png", 
               caption="Exemple de Marketing Mix Modeling")
   
   # Afficher les m√©triques du mod√®le si disponibles
   if metrics:
       st.subheader("Performance du mod√®le")
       
       col1, col2, col3, col4 = st.columns(4)
       
       with col1:
           st.metric(label="R¬≤", value=f"{metrics['r2']:.3f}")
       
       with col2:
           st.metric(label="RMSE", value=f"{metrics['rmse']:.2f}")
       
       with col3:
           st.metric(label="MAE", value=f"{metrics['mae']:.2f}")
       
       with col4:
           st.metric(label="MAPE", value=f"{metrics['mape']:.2f}%")
   
   # Graphique des ventes au fil du temps
   st.subheader("√âvolution des ventes")
   if contributions_df is not None:
       fig, ax = plt.subplots(figsize=(12, 6))
       
       # Convertir les dates
       contributions_df['date'] = pd.to_datetime(contributions_df['date'])
       contributions_df = contributions_df.sort_values('date')
       
       # Tracer les ventes r√©elles et pr√©dites
       ax.plot(contributions_df['date'], contributions_df['actual_revenue'], 
               label='Ventes r√©elles', color='blue')
       ax.plot(contributions_df['date'], contributions_df['predicted_revenue'], 
               label='Ventes pr√©dites', color='red', linestyle='--')
       
       # Formatage
       ax.set_xlabel('Date')
       ax.set_ylabel('Ventes (¬£)')
       ax.set_title('√âvolution des ventes - R√©elles vs Pr√©dites')
       ax.legend()
       ax.grid(True, alpha=0.3)
       plt.xticks(rotation=45)
       plt.tight_layout()
       
       st.pyplot(fig)
   else:
       st.info("Graphique non disponible. Veuillez d'abord ex√©cuter l'analyse MMM.")

elif page == "Analyse des contributions":
   st.header("Analyse des contributions par canal")
   
   if contributions_df is not None:
       # Pr√©parer les donn√©es
       channels = config['marketing_channels']
       contrib_cols = [f"{ch}_contribution" for ch in channels if f"{ch}_contribution" in contributions_df.columns]
       
       # Ajouter la contribution de base
       if 'baseline_contribution' in contributions_df.columns:
           contrib_cols.append('baseline_contribution')
       
       # Calculer les contributions moyennes
       avg_contribs = {}
       for col in contrib_cols:
           channel = col.replace('_contribution', '')
           avg_contribs[channel] = contributions_df[col].mean()
       
       # Cr√©er un DataFrame pour l'affichage
       contrib_df = pd.DataFrame({
           'Canal': list(avg_contribs.keys()),
           'Contribution moyenne (¬£)': list(avg_contribs.values()),
           'Contribution (%)': [v / contributions_df['predicted_revenue'].mean() * 100 for v in avg_contribs.values()]
       }).sort_values('Contribution moyenne (¬£)', ascending=False)
       
       # Afficher le tableau
       st.subheader("Contributions moyennes par canal")
       st.dataframe(contrib_df.style.format({
           'Contribution moyenne (¬£)': '{:.2f}',
           'Contribution (%)': '{:.2f}%'
       }))
       
       # Graphique de r√©partition des contributions
       st.subheader("R√©partition des contributions")
       
       col1, col2 = st.columns(2)
       
       with col1:
           # Graphique √† barres
           fig, ax = plt.subplots(figsize=(10, 6))
           bars = ax.bar(contrib_df['Canal'], contrib_df['Contribution moyenne (¬£)'])
           
           # Ajouter les valeurs sur les barres
           for bar in bars:
               height = bar.get_height()
               ax.text(bar.get_x() + bar.get_width()/2., height + 5,
                       f'¬£{height:.0f}', ha='center', va='bottom', fontsize=10)
           
           ax.set_xlabel('Canal')
           ax.set_ylabel('Contribution moyenne (¬£)')
           ax.set_title('Contribution moyenne par canal marketing')
           plt.xticks(rotation=45)
           plt.tight_layout()
           
           st.pyplot(fig)
       
       with col2:
           # Graphique en camembert
           fig, ax = plt.subplots(figsize=(10, 6))
           ax.pie(contrib_df['Contribution (%)'], labels=contrib_df['Canal'], autopct='%1.1f%%',
                  startangle=90, shadow=False)
           ax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
           ax.set_title('R√©partition des contributions (%)')
           plt.tight_layout()
           
           st.pyplot(fig)
       
       # Contributions dans le temps
       st.subheader("√âvolution des contributions dans le temps")
       
       # Pr√©parer les donn√©es
       contributions_df['date'] = pd.to_datetime(contributions_df['date'])
       contributions_df = contributions_df.sort_values('date')
       
       # Agr√©ger par semaine pour une meilleure lisibilit√©
       contributions_df['week'] = contributions_df['date'].dt.isocalendar().week
       contributions_df['year'] = contributions_df['date'].dt.isocalendar().year
       
       weekly_contribs = contributions_df.groupby(['year', 'week']).agg({
           'date': 'first',
           **{col: 'mean' for col in contrib_cols}
       }).reset_index()
       
       # Tracer les contributions dans le temps
       fig, ax = plt.subplots(figsize=(12, 6))
       
       for col in contrib_cols:
           channel = col.replace('_contribution', '')
           ax.plot(weekly_contribs['date'], weekly_contribs[col], label=channel, linewidth=2)
       
       ax.set_xlabel('Date')
       ax.set_ylabel('Contribution (¬£)')
       ax.set_title('√âvolution des contributions par canal')
       ax.legend(title='Canal', bbox_to_anchor=(1.05, 1), loc='upper left')
       ax.grid(True, alpha=0.3)
       plt.xticks(rotation=45)
       plt.tight_layout()
       
       st.pyplot(fig)
   else:
       st.info("Donn√©es de contribution non disponibles. Veuillez d'abord ex√©cuter l'analyse MMM.")

elif page == "Allocation budg√©taire":
   st.header("Optimisation de l'allocation budg√©taire")
   
   if budget_df is not None and contributions_df is not None:
       # Pr√©parer les donn√©es
       roi_data = {}
       for channel in config['marketing_channels']:
           roi_col = f"{channel}_roi"
           if roi_col in contributions_df.columns:
               roi_data[channel] = contributions_df[roi_col].median()
       
       # Cr√©er un DataFrame pour l'affichage du ROI
       roi_df = pd.DataFrame({
           'Canal': list(roi_data.keys()),
           'ROI m√©dian': list(roi_data.values())
       }).sort_values('ROI m√©dian', ascending=False)
       
       # Afficher les ROI
       st.subheader("Retour sur investissement (ROI) par canal")
       st.dataframe(roi_df.style.format({
           'ROI m√©dian': '{:.2f}'
       }))
       
       # Graphique du ROI
       fig, ax = plt.subplots(figsize=(10, 6))
       bars = ax.bar(roi_df['Canal'], roi_df['ROI m√©dian'])
       
       # Ajouter les valeurs sur les barres
       for bar in bars:
           height = bar.get_height()
           ax.text(bar.get_x() + bar.get_width()/2., height + 0.05,
                   f'{height:.2f}', ha='center', va='bottom', fontsize=10)
       
       ax.set_xlabel('Canal')
       ax.set_ylabel('ROI (¬£ g√©n√©r√©s par ¬£ d√©pens√©e)')
       ax.set_title('ROI m√©dian par canal marketing')
       plt.xticks(rotation=45)
       plt.tight_layout()
       
       st.pyplot(fig)
       
       # Allocation budg√©taire optimis√©e
       st.subheader("Allocation budg√©taire optimis√©e")
       
       # Renommer les colonnes pour une meilleure pr√©sentation
       budget_display = budget_df.copy()
       if 'channel' in budget_display.columns:
           budget_display = budget_display.rename(columns={
               'channel': 'Canal',
               'budget': 'Budget (¬£)',
               'budget_pct': 'Budget (%)',
               'roi': 'ROI'
           })
           
           # Afficher le tableau
           st.dataframe(budget_display.style.format({
               'Budget (¬£)': '¬£{:.2f}',
               'Budget (%)': '{:.2f}%',
               'ROI': '{:.2f}'
           }))
           
           # Graphique d'allocation
           fig, ax1 = plt.subplots(figsize=(12, 6))
           
           x = budget_display['Canal']
           y1 = budget_display['Budget (¬£)']
           
           # Graphique en barres pour le budget
           bars = ax1.bar(x, y1, color='skyblue')
           
           # Ajouter les valeurs sur les barres
           for bar in bars:
               height = bar.get_height()
               ax1.text(bar.get_x() + bar.get_width()/2., height + 500,
                       f'¬£{height:.0f}', ha='center', va='bottom', fontsize=10)
           
           ax1.set_xlabel('Canal')
           ax1.set_ylabel('Budget allou√© (¬£)', color='skyblue')
           ax1.tick_params(axis='y', labelcolor='skyblue')
           
           # Cr√©er un deuxi√®me axe Y pour le ROI
           ax2 = ax1.twinx()
           ax2.plot(x, budget_display['ROI'], 'ro-', linewidth=2)
           ax2.set_ylabel('ROI', color='red')
           ax2.tick_params(axis='y', labelcolor='red')
           
           plt.title('Allocation budg√©taire optimis√©e et ROI par canal')
           plt.xticks(rotation=45)
           plt.tight_layout()
           
           st.pyplot(fig)
           
           # Comparaison avec le budget actuel
           st.subheader("Comparaison avec le budget actuel")
           st.write("""
           La comparaison avec le budget actuel n'est pas disponible car nous 
           utilisons des donn√©es marketing simul√©es. Dans un contexte r√©el, cette 
           section montrerait la comparaison entre l'allocation optimis√©e et l'allocation actuelle.
           """)
   else:
       st.info("Donn√©es d'allocation budg√©taire non disponibles. Veuillez d'abord ex√©cuter l'analyse MMM.")

elif page == "Simulateur":
   st.header("Simulateur d'allocation budg√©taire")
   
   if budget_df is not None and contributions_df is not None:
       st.write("""
       Ce simulateur vous permet d'explorer diff√©rents sc√©narios d'allocation budg√©taire
       et d'estimer leur impact sur les ventes.
       """)
       
       # Obtenir le budget total de base
       default_total_budget = budget_df['budget'].sum() if 'budget' in budget_df.columns else 100000
       
       # Input pour le budget total
       total_budget = st.slider(
           "Budget marketing total (¬£)",
           min_value=int(default_total_budget * 0.5),
           max_value=int(default_total_budget * 2),
           value=int(default_total_budget),
           step=5000
       )
       
       # Pr√©parer les donn√©es pour le simulateur
       channels = config['marketing_channels']
       
       # Calculer les ROI m√©dians par canal
       roi_data = {}
       for channel in channels:
           roi_col = f"{channel}_roi"
           if roi_col in contributions_df.columns:
               roi_data[channel] = contributions_df[roi_col].median()
       
       # Extraire les allocations par d√©faut
       default_allocations = {}
       if 'channel' in budget_df.columns and 'budget_pct' in budget_df.columns:
           for _, row in budget_df.iterrows():
               channel = row['channel']
               if channel in channels:
                   default_allocations[channel] = row['budget_pct']
       
       # Si pas d'allocations par d√©faut, r√©partir √©quitablement
       if not default_allocations:
           for channel in channels:
               default_allocations[channel] = 100 / len(channels)
       
       # Afficher les sliders pour ajuster l'allocation
       st.subheader("Ajuster l'allocation budg√©taire (%)")
       
       allocations = {}
       col1, col2 = st.columns(2)
       
       for i, channel in enumerate(channels):
           default = default_allocations.get(channel, 100 / len(channels))
           with col1 if i < len(channels) / 2 else col2:
               allocations[channel] = st.slider(
                   f"{channel}",
                   min_value=0.0,
                   max_value=100.0,
                   value=float(default),
                   step=0.5,
                   format="%.1f%%"
               )
       
       # Normaliser les allocations pour qu'elles somment √† 100%
       total_allocation = sum(allocations.values())
       if total_allocation != 0:
           for channel in allocations:
               allocations[channel] = (allocations[channel] / total_allocation) * 100
       
       # Calculer les budgets par canal
       budgets = {channel: (allocation / 100) * total_budget for channel, allocation in allocations.items()}
       
       # Calculer l'impact estim√© sur les ventes
       estimated_contributions = {}
       baseline_contribution = contributions_df['baseline_contribution'].mean() if 'baseline_contribution' in contributions_df.columns else 0
       
       total_contribution = baseline_contribution
       for channel, budget in budgets.items():
           roi = roi_data.get(channel, 0)
           channel_contribution = budget * roi
           estimated_contributions[channel] = channel_contribution
           total_contribution += channel_contribution
       
       # Cr√©er un DataFrame pour l'affichage des r√©sultats
       results_df = pd.DataFrame({
           'Canal': list(budgets.keys()),
           'Budget (¬£)': list(budgets.values()),
           'Budget (%)': [allocation for allocation in allocations.values()],
           'ROI': [roi_data.get(channel, 0) for channel in budgets.keys()],
           'Contribution estim√©e (¬£)': [estimated_contributions[channel] for channel in budgets.keys()]
       })
       
       # Ajouter la ligne de base
       results_df = pd.concat([
           results_df,
           pd.DataFrame({
               'Canal': ['Baseline'],
               'Budget (¬£)': [0],
               'Budget (%)': [0],
               'ROI': [0],
               'Contribution estim√©e (¬£)': [baseline_contribution]
           })
       ]).reset_index(drop=True)
       
       # Afficher les r√©sultats
       st.subheader("R√©sultats de la simulation")
       
       # M√©triques principales
       col1, col2, col3 = st.columns(3)
       
       with col1:
           st.metric(
               label="Budget total",
               value=f"¬£{total_budget:,.2f}"
           )
       
       with col2:
           st.metric(
               label="Contribution marketing estim√©e",
               value=f"¬£{(total_contribution - baseline_contribution):,.2f}"
           )
       
       with col3:
           st.metric(
               label="Ventes totales estim√©es",
               value=f"¬£{total_contribution:,.2f}"
           )
       
       # Tableau d√©taill√©
       st.dataframe(results_df.style.format({
           'Budget (¬£)': '¬£{:,.2f}',
           'Budget (%)': '{:.2f}%',
           'ROI': '{:.2f}',
           'Contribution estim√©e (¬£)': '¬£{:,.2f}'
       }))
       
       # Graphique des contributions estim√©es
       fig, ax = plt.subplots(figsize=(10, 6))
       
       # Exclure la baseline pour une meilleure visualisation
       plot_df = results_df[results_df['Canal'] != 'Baseline']
       
       bars = ax.bar(plot_df['Canal'], plot_df['Contribution estim√©e (¬£)'])
       
       # Ajouter les valeurs sur les barres
       for bar in bars:
           height = bar.get_height()
           ax.text(bar.get_x() + bar.get_width()/2., height + 50,
                   f'¬£{height:,.0f}', ha='center', va='bottom', fontsize=10)
       
       ax.set_xlabel('Canal')
       ax.set_ylabel('Contribution estim√©e (¬£)')
       ax.set_title('Contribution estim√©e par canal marketing')
       plt.xticks(rotation=45)
       plt.tight_layout()
       
       st.pyplot(fig)
   else:
       st.info("Donn√©es requises non disponibles pour le simulateur. Veuillez d'abord ex√©cuter l'analyse MMM.")

elif page == "√Ä propos":
   st.header("√Ä propos du projet")
   
   st.write("""
   ## Marketing Mix Modeling (MMM)
   
   Ce projet impl√©mente une analyse de Marketing Mix Modeling (MMM) compl√®te pour 
   optimiser l'allocation budg√©taire marketing en utilisant les donn√©es Online Retail.
   
   ### M√©thodologie
   
   Le MMM utilise des techniques statistiques avanc√©es pour d√©composer les ventes et 
   quantifier l'impact de chaque canal marketing. Notre approche comprend :
   
   1. **Pr√©traitement des donn√©es** : Nettoyage, agr√©gation et pr√©paration des donn√©es
   2. **Mod√©lisation des effets retard√©s** : Utilisation de transformations d'adstock pour 
      capturer les effets √† long terme des campagnes marketing
   3. **Mod√©lisation des effets de saturation** : Utilisation de transformations non lin√©aires 
      pour mod√©liser les rendements d√©croissants
   4. **Mod√©lisation avanc√©e** : Utilisation d'algorithmes comme LightGBM pour capturer 
      les relations complexes et non lin√©aires
   5. **Optimisation budg√©taire** : Utilisation d'algorithmes d'optimisation pour maximiser le ROI
   
   ### Limites de l'analyse
   
   - Les d√©penses marketing sont simul√©es car les donn√©es r√©elles ne sont pas disponibles
   - Certains facteurs externes peuvent ne pas √™tre pris en compte
   - Les effets synergiques entre canaux sont difficiles √† capturer parfaitement
   
   ### R√©f√©rences
   
   - [Facebook/Meta Robyn](https://github.com/facebookexperimental/Robyn)
   - [Google's MMM Python Library](https://github.com/google/lightweight_mmm)
   - Jin, Y., Wang, Y., Sun, Y., Chan, D., & Koehler, J. (2017). Bayesian Methods for Media Mix Modeling with Carryover and Shape Effects.
   """)
   
   st.subheader("Contact")
   st.write("""
   Pour toute question ou suggestion concernant ce projet, veuillez contacter :
   - **Nom** : Samir Elaissaouy
   - **Email** : elaissaouy.samir12@gmail.com
   - **GitHub** : [github.com/samirelais](https://github.com/samirelais)
   """)
