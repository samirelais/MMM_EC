import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
import sys
import json
from datetime import datetime, timedelta
from fpdf import FPDF
import matplotlib
matplotlib.use('Agg')  # N√©cessaire pour g√©n√©rer des graphiques sans serveur X
import base64
import io
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Image
from reportlab.lib.units import inch
# Configuration de la page
st.set_page_config(
    page_title="Dashboard Marketing Mix Modeling",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Titre de l'application
st.title("üìä Dashboard Marketing Mix Modeling")
st.write("Analyse et optimisation de l'attribution marketing bas√©e sur les donn√©es Online Retail")

# D√©finition des chemins
# Utiliser des chemins relatifs au lieu de chemins absolus
base_path = os.path.dirname(os.path.abspath(__file__))
if not os.path.isdir(base_path):
    base_path = os.getcwd()

# Pour remonter d'un niveau depuis le dossier app/
parent_path = os.path.dirname(base_path)

# Fonction pour charger la configuration
@st.cache_data
def load_config():
    try:
        config_path = os.path.join(parent_path, "config/online_retail_config.json")
        with open(config_path, "r") as f:
            return json.load(f)
    except FileNotFoundError as e:
        st.warning(f"Fichier de configuration non trouv√©: {e}. Chemins v√©rifi√©s: {config_path}")
        # Configuration par d√©faut
        return {
            "marketing_channels": ["search", "social", "email", "display", "affiliates"],
            "data_path": "data/online_retail.csv",
            "date_column": "InvoiceDate",
            "target_column": "Revenue",
            "time_granularity": "daily"
        }






# Fonction pour charger la configuration
@st.cache_data
def load_config():
    try:
        config_path = os.path.join(base_path, "config/online_retail_config.json")
        with open(config_path, "r") as f:
            return json.load(f)
    except FileNotFoundError as e:
        st.warning(f"Fichier de configuration non trouv√©: {e}. Chemins v√©rifi√©s: {config_path}")
        # Configuration par d√©faut
        return {
            "marketing_channels": ["search", "social", "email", "display", "affiliates"],
            "data_path": "data/online_retail.csv",
            "date_column": "InvoiceDate",
            "target_column": "Revenue",
            "time_granularity": "daily"
        }

# Fonction pour g√©n√©rer un rapport PDF
def generate_pdf_report(contributions_df, budget_df, metrics, config):
    """
    G√©n√®re un rapport PDF complet avec les r√©sultats de l'analyse MMM.
    """
    try:
        pdf = FPDF()
        pdf.add_page()
        
        # Param√®tres de police
        pdf.set_font('Arial', 'B', 16)
        
        # Titre du rapport
        pdf.cell(190, 10, 'Rapport Marketing Mix Modeling', 0, 1, 'C')
        pdf.ln(10)
        
        # Sous-titre et date
        pdf.set_font('Arial', 'I', 10)
        current_date = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        pdf.cell(190, 5, f'G√©n√©r√© le: {current_date}', 0, 1, 'R')
        pdf.ln(5)
        
        # R√©sum√© des performances du mod√®le
        pdf.set_font('Arial', 'B', 12)
        pdf.cell(190, 10, '1. Performance du Mod√®le', 0, 1, 'L')
        pdf.set_font('Arial', '', 10)
        pdf.cell(190, 7, f"R¬≤: {metrics['r2']:.3f}   RMSE: {metrics['rmse']:.2f}   MAE: {metrics['mae']:.2f}   MAPE: {metrics['mape']:.2f}%", 0, 1, 'L')
        pdf.ln(5)
        
        # Contributions par canal
        pdf.set_font('Arial', 'B', 12)
        pdf.cell(190, 10, '2. Contributions par Canal', 0, 1, 'L')
        pdf.set_font('Arial', '', 10)
        
        # Pr√©parer les donn√©es pour le tableau
        channels = config['marketing_channels']
        contrib_cols = [f"{ch}_contribution" for ch in channels if f"{ch}_contribution" in contributions_df.columns]
        
        if 'baseline_contribution' in contributions_df.columns:
            contrib_cols.append('baseline_contribution')
            
        avg_contribs = {}
        for col in contrib_cols:
            channel = col.replace('_contribution', '')
            avg_contribs[channel] = contributions_df[col].mean()
            
        # Ent√™tes du tableau
        pdf.set_fill_color(200, 220, 255)
        pdf.cell(60, 7, 'Canal', 1, 0, 'C', 1)
        pdf.cell(60, 7, 'Contribution moyenne (¬£)', 1, 0, 'C', 1)
        pdf.cell(60, 7, 'Contribution (%)', 1, 1, 'C', 1)
        
        # Donn√©es du tableau
        total_revenue = contributions_df['predicted_revenue'].mean()
        pdf.set_fill_color(255, 255, 255)
        
        for channel, value in avg_contribs.items():
            contribution_pct = max(0, value / total_revenue * 100)
            pdf.cell(60, 7, channel, 1, 0, 'L')
            pdf.cell(60, 7, f'{value:.2f}', 1, 0, 'R')
            pdf.cell(60, 7, f'{contribution_pct:.2f}%', 1, 1, 'R')
        
        pdf.ln(5)
        
        # Allocation budg√©taire
        pdf.set_font('Arial', 'B', 12)
        pdf.cell(190, 10, '3. Allocation Budg√©taire Optimis√©e', 0, 1, 'L')
        pdf.set_font('Arial', '', 10)
        
        # Ent√™tes du tableau
        pdf.set_fill_color(200, 220, 255)
        pdf.cell(47, 7, 'Canal', 1, 0, 'C', 1)
        pdf.cell(47, 7, 'Budget (¬£)', 1, 0, 'C', 1)
        pdf.cell(47, 7, 'Budget (%)', 1, 0, 'C', 1)
        pdf.cell(47, 7, 'ROI', 1, 1, 'C', 1)
        
        # Donn√©es du tableau de budget
        if 'channel' in budget_df.columns:
            for _, row in budget_df.iterrows():
                pdf.cell(47, 7, row['channel'], 1, 0, 'L')
                pdf.cell(47, 7, f'{row["budget"]:.2f}', 1, 0, 'R')
                pdf.cell(47, 7, f'{row["budget_pct"]:.2f}%', 1, 0, 'R')
                pdf.cell(47, 7, f'{row["roi"]:.2f}', 1, 1, 'R')
        
        pdf.ln(5)
        
        # Ajouter un graphique d'√©volution des ventes
        pdf.set_font('Arial', 'B', 12)
        pdf.cell(190, 10, '4. √âvolution des Ventes', 0, 1, 'L')
        
        # Cr√©er le graphique
        fig, ax = plt.subplots(figsize=(10, 5))
        
        # S'assurer que les dates sont au bon format
        if not isinstance(contributions_df['date'].iloc[0], pd.Timestamp):
            contributions_df['date'] = pd.to_datetime(contributions_df['date'])
        
        # Trier par date
        contributions_df = contributions_df.sort_values('date')
        
        # Tracer les ventes r√©elles et pr√©dites
        ax.plot(contributions_df['date'], contributions_df['actual_revenue'], 
                label='Ventes r√©elles', color='blue')
        ax.plot(contributions_df['date'], contributions_df['predicted_revenue'], 
                label='Ventes pr√©dites', color='red', linestyle='--')
        
        # Formatage du graphique
        ax.set_xlabel('Date')
        ax.set_ylabel('Ventes (¬£)')
        ax.set_title('√âvolution des ventes - R√©elles vs Pr√©dites')
        ax.legend()
        ax.grid(True, alpha=0.3)
        plt.xticks(rotation=45)
        plt.tight_layout()
        
        # Sauvegarder le graphique en m√©moire
        img_buffer = io.BytesIO()
        plt.savefig(img_buffer, format='png')
        img_buffer.seek(0)
        
        # Ajouter le graphique au PDF
        img_width = 190
        img_height = 90
        x_position = 10
        y_position = pdf.get_y()
        
        pdf.image(img_buffer, x=x_position, y=y_position, w=img_width, h=img_height)
        
        # Ajuster la position Y apr√®s l'image
        pdf.set_y(y_position + img_height + 10)
        
        # Conclusion et recommandations
        pdf.set_font('Arial', 'B', 12)
        pdf.cell(190, 10, '5. Recommandations', 0, 1, 'L')
        pdf.set_font('Arial', '', 10)
        
        # Chercher le canal avec le meilleur ROI
        best_roi_channel = 'N/A'
        if 'channel' in budget_df.columns:
            best_roi_row = budget_df.loc[budget_df['roi'].idxmax()]
            best_roi_channel = best_roi_row['channel']
        
        # Ajouter des recommandations bas√©es sur l'analyse
        pdf.multi_cell(190, 7, 
            f"Bas√© sur l'analyse MMM, voici nos recommandations cl√©s:\n\n"
            f"1. Le canal '{best_roi_channel}' pr√©sente le meilleur ROI et devrait √™tre privil√©gi√©.\n"
            f"2. L'allocation budg√©taire optimis√©e pr√©sent√©e dans ce rapport permettrait d'am√©liorer le retour sur investissement global.\n"
            f"3. Une r√©vision trimestrielle de l'allocation est recommand√©e pour s'adapter aux √©volutions du march√©.\n"
            f"4. Des tests A/B devraient √™tre conduits pour valider empiriquement l'efficacit√© des diff√©rents canaux."
        )
        
        return pdf.output(dest='S')
    except Exception as e:
        st.error(f"Erreur lors de la g√©n√©ration du rapport PDF: {e}")
        return None

def generate_mmm_guide():
    """G√©n√®re un guide PDF sur les principes du Marketing Mix Modeling"""
    try:
        # Cr√©er un buffer pour stocker le PDF
        buffer = io.BytesIO()
        
        # Cr√©er le document PDF
        doc = SimpleDocTemplate(buffer, pagesize=letter)
        elements = []
        
        # Styles
        styles = getSampleStyleSheet()
        title_style = styles['Heading1']
        subtitle_style = styles['Heading2']
        subsubtitle_style = styles['Heading3']
        normal_style = styles['Normal']
        
        # Style personnalis√© pour les paragraphes du guide
        guide_style = ParagraphStyle(
            'GuideStyle',
            parent=normal_style,
            leading=14,  # Espacement entre les lignes
            spaceAfter=12  # Espace apr√®s chaque paragraphe
        )
        
        # Titre principal
        elements.append(Paragraph("Guide du Marketing Mix Modeling", title_style))
        elements.append(Spacer(1, 0.3*inch))
        
        # Introduction
        elements.append(Paragraph("Introduction", subtitle_style))
        intro_text = """
        Le Marketing Mix Modeling (MMM) est une technique statistique utilis√©e pour quantifier l'impact des diff√©rentes 
        activit√©s marketing sur les ventes. Ce guide vous pr√©sente les concepts fondamentaux du MMM, sa m√©thodologie
        et son application dans un contexte d'entreprise.
        """
        elements.append(Paragraph(intro_text, guide_style))
        elements.append(Spacer(1, 0.2*inch))
        
        # Principes fondamentaux
        elements.append(Paragraph("Principes fondamentaux", subtitle_style))
        
        elements.append(Paragraph("Qu'est-ce que le MMM?", subsubtitle_style))
        mmm_text = """
        Le Marketing Mix Modeling est une approche analytique qui utilise des techniques de r√©gression statistique pour 
        √©valuer l'efficacit√© des diff√©rents canaux marketing et quantifier leur impact sur les ventes ou d'autres 
        indicateurs de performance. L'objectif principal est de d√©terminer le retour sur investissement (ROI) de chaque 
        canal et d'optimiser l'allocation des ressources marketing.
        """
        elements.append(Paragraph(mmm_text, guide_style))
        
        elements.append(Paragraph("Variables cl√©s du MMM", subsubtitle_style))
        var_text = """
        Un mod√®le MMM prend g√©n√©ralement en compte quatre types de variables:
        ‚Ä¢ Variables d√©pendantes: Ventes, revenus ou autres KPIs √† expliquer
        ‚Ä¢ Variables marketing: D√©penses publicitaires, GRP, impressions par canal
        ‚Ä¢ Variables de contr√¥le: Prix, distribution, saisonnalit√©, concurrence
        ‚Ä¢ Variables externes: Facteurs macro√©conomiques, m√©t√©o, √©v√©nements sp√©ciaux
        """
        elements.append(Paragraph(var_text, guide_style))
        elements.append(Spacer(1, 0.2*inch))
        
        # M√©thodologie
        elements.append(Paragraph("M√©thodologie", subtitle_style))
        
        elements.append(Paragraph("1. Collecte et pr√©paration des donn√©es", subsubtitle_style))
        data_text = """
        La premi√®re √©tape consiste √† rassembler toutes les donn√©es pertinentes: historique des ventes, 
        d√©penses marketing par canal, prix, promotions, et variables externes. Les donn√©es doivent √™tre 
        nettoy√©es, agr√©g√©es au m√™me niveau temporel (g√©n√©ralement hebdomadaire ou mensuel) et explor√©es
        pour d√©tecter des tendances ou anomalies.
        """
        elements.append(Paragraph(data_text, guide_style))
        
        elements.append(Paragraph("2. Mod√©lisation des effets marketing", subsubtitle_style))
        model_text = """
        Un mod√®le MMM complet prend en compte trois ph√©nom√®nes essentiels:
        ‚Ä¢ Effet Adstock (retard√©): Les effets du marketing persistent au-del√† de la p√©riode initiale
        ‚Ä¢ Effet de saturation: Rendements d√©croissants √† mesure que les d√©penses augmentent
        ‚Ä¢ Effet synergique: Interactions entre diff√©rents canaux marketing
        
        Ces effets sont mod√©lis√©s √† l'aide de transformations math√©matiques comme les fonctions d'Adstock, 
        les fonctions Hill, Michaelis-Menten ou logarithmiques pour les effets de saturation.
        """
        elements.append(Paragraph(model_text, guide_style))
        
        elements.append(Paragraph("3. Construction et validation du mod√®le", subsubtitle_style))
        validation_text = """
        Les mod√®les MMM peuvent √™tre construits avec diff√©rentes techniques, allant de la r√©gression lin√©aire 
        aux algorithmes plus avanc√©s comme le gradient boosting (XGBoost, LightGBM) ou les mod√®les bay√©siens.
        
        La validation du mod√®le est cruciale et implique:
        ‚Ä¢ Validation crois√©e pour √©viter le surajustement
        ‚Ä¢ Tests de robustesse avec diff√©rentes p√©riodes
        ‚Ä¢ V√©rification des hypoth√®ses statistiques
        ‚Ä¢ Comparaison des r√©sultats avec les donn√©es historiques
        """
        elements.append(Paragraph(validation_text, guide_style))
        
        elements.append(Paragraph("4. Analyse des r√©sultats et optimisation", subsubtitle_style))
        results_text = """
        L'analyse des r√©sultats permet d'identifier:
        ‚Ä¢ La contribution de chaque canal aux ventes totales
        ‚Ä¢ Le ROI par canal (retour g√©n√©r√© pour chaque euro investi)
        ‚Ä¢ Le point de saturation pour chaque canal
        
        Ces informations servent ensuite √† optimiser l'allocation budg√©taire future, g√©n√©ralement en utilisant 
        des algorithmes d'optimisation sous contraintes.
        """
        elements.append(Paragraph(results_text, guide_style))
        elements.append(Spacer(1, 0.2*inch))
        
        # Applications et limites
        elements.append(Paragraph("Applications et limites", subtitle_style))
        
        elements.append(Paragraph("Applications pratiques", subsubtitle_style))
        applications_text = """
        Le MMM est utilis√© pour:
        ‚Ä¢ Optimiser l'allocation budg√©taire entre canaux
        ‚Ä¢ Planifier les futures campagnes marketing
        ‚Ä¢ Justifier les investissements marketing aupr√®s de la direction
        ‚Ä¢ Comprendre l'efficacit√© relative des diff√©rents canaux
        ‚Ä¢ Simuler diff√©rents sc√©narios budg√©taires
        """
        elements.append(Paragraph(applications_text, guide_style))
        
        elements.append(Paragraph("Limites et d√©fis", subsubtitle_style))
        limits_text = """
        Le MMM pr√©sente certaines limites:
        ‚Ä¢ N√©cessite d'importantes quantit√©s de donn√©es historiques (2-3 ans minimum)
        ‚Ä¢ Difficult√© √† capturer les effets √† tr√®s long terme (brand building)
        ‚Ä¢ Complexit√© √† mod√©liser les interactions entre canaux
        ‚Ä¢ Sensibilit√© aux changements structurels du march√©
        ‚Ä¢ Incapacit√© √† mesurer les effets au niveau individuel
        """
        elements.append(Paragraph(limits_text, guide_style))
        elements.append(Spacer(1, 0.2*inch))
        
        # Tendances r√©centes
        elements.append(Paragraph("Tendances r√©centes", subtitle_style))
        trends_text = """
        Le MMM continue d'√©voluer avec:
        ‚Ä¢ L'int√©gration de l'apprentissage automatique pour des mod√®les plus pr√©cis
        ‚Ä¢ L'unification avec les mod√®les d'attribution digitale (Unified MMM)
        ‚Ä¢ L'utilisation de donn√©es granulaires au niveau g√©ographique ou d√©mographique
        ‚Ä¢ L'incorporation de mod√®les bay√©siens pour une meilleure quantification de l'incertitude
        ‚Ä¢ L'automatisation du processus avec des plateformes comme Meta Robyn ou Google LightweightMMM
        """
        elements.append(Paragraph(trends_text, guide_style))
        
        # Conclusion
        elements.append(Paragraph("Conclusion", subtitle_style))
        conclusion_text = """
        Le Marketing Mix Modeling reste un outil essentiel dans l'arsenal analytique des entreprises, 
        permettant une approche bas√©e sur les donn√©es pour optimiser l'efficacit√© marketing. Bien que 
        pr√©sentant certaines limites, il offre une vision holistique de l'impact marketing difficile 
        √† obtenir par d'autres m√©thodes. Son √©volution continue avec l'incorporation de nouvelles 
        techniques et l'int√©gration de donn√©es plus d√©taill√©es en fait un domaine d'innovation constante.
        """
        elements.append(Paragraph(conclusion_text, guide_style))
        
        # G√©n√©rer le PDF
        doc.build(elements)
        return buffer.getvalue()
        
    except Exception as e:
        st.error(f"Erreur lors de la g√©n√©ration du guide: {e}")
        return None
# Fonction pour charger les r√©sultats du mod√®le
@st.cache_data
def load_results():
    try:
        # Chemins des fichiers
        contributions_path = os.path.join(base_path, "reports/channel_contributions.csv")
        budget_path = os.path.join(base_path, "reports/budget_allocation.csv")
        metrics_path = os.path.join(base_path, "reports/model_metrics.json")
        
        # V√©rifier si les fichiers existent
        for path in [contributions_path, budget_path, metrics_path]:
            if not os.path.exists(path):
                st.warning(f"Fichier non trouv√©: {path}")
        
        # Charger les contributions
        contributions_df = pd.read_csv(contributions_path)
        
        # Charger l'allocation budg√©taire
        budget_df = pd.read_csv(budget_path)
        
        # Charger les m√©triques
        with open(metrics_path, "r") as f:
            metrics = json.load(f)
        
        return contributions_df, budget_df, metrics
    except FileNotFoundError as e:
        st.warning(f"R√©sultats du mod√®le non trouv√©s: {e}")
        return None, None, None
    except Exception as e:
        st.error(f"Erreur lors du chargement des r√©sultats: {e}")
        return None, None, None

# Fonction pour ex√©cuter l'analyse MMM (si les modules sont import√©s)
def run_mmm_analysis():
    try:
        st.info("Ex√©cution de l'analyse MMM en cours...")
        
        # V√©rifier si les modules sont disponibles
        if 'OnlineRetailLoader' not in globals():
            st.error("Les modules n√©cessaires ne sont pas disponibles. Assurez-vous d'√™tre sur Google Colab avec les modules import√©s.")
            return False
        
        # Charger les donn√©es
        config = load_config()
        loader = OnlineRetailLoader(os.path.join(base_path, config["data_path"]))
        data = loader.load_and_prepare_data()
        
        # Cr√©er et entra√Æner le mod√®le MMM
        model = MMMModel(config)
        model_results = model.train(data)
        
        # G√©n√©rer les rapports
        model.generate_reports(model_results)
        
        st.success("Analyse MMM termin√©e avec succ√®s!")
        return True
    except Exception as e:
        st.error(f"Erreur lors de l'ex√©cution de l'analyse MMM: {e}")
        return False

# Charger la configuration
config = load_config()

# Sidebar pour la navigation
st.sidebar.title("Navigation")
page = st.sidebar.radio(
    "Choisir une page",
    ["Vue d'ensemble", "Analyse des contributions", "Allocation budg√©taire", "Simulateur", "√Ä propos"]
)

# Sidebar pour les informations
st.sidebar.title("Informations")
st.sidebar.info(
    """
    Ce dashboard pr√©sente les r√©sultats d'une analyse 
    de Marketing Mix Modeling (MMM) sur les donn√©es 
    Online Retail.
    
    **Source des donn√©es:** 
    [Kaggle - Online Retail Dataset](https://www.kaggle.com/datasets/vijayuv/onlineretail)
    """
)

# Sidebar pour ex√©cuter l'analyse MMM ou charger des donn√©es de d√©mo
if st.sidebar.button("Ex√©cuter l'analyse MMM"):
    run_mmm_analysis()

# Tenter de charger les r√©sultats
try:
    contributions_df, budget_df, metrics = load_results()
    if all(x is None for x in [contributions_df, budget_df, metrics]):
        st.warning("Aucun r√©sultat de mod√®le disponible. Utilisez 'Ex√©cuter l'analyse MMM' pour g√©n√©rer des r√©sultats.")
except Exception as e:
    st.error(f"Erreur lors du chargement des r√©sultats: {e}")
    contributions_df, budget_df, metrics = None, None, None

# V√©rifier si les r√©sultats sont disponibles
if contributions_df is None:
    # Option de d√©mo avec donn√©es simul√©es si les r√©sultats ne sont pas disponibles
    if st.sidebar.button("Charger des donn√©es de d√©mo"):
        # G√©n√©rer des donn√©es de d√©mo pour les contributions
        dates = pd.date_range(start='2010-12-01', end='2011-12-31')
        channels = config['marketing_channels'] + ['baseline']
        
        # Initialiser le DataFrame
        contributions_df = pd.DataFrame({'date': dates})
        contributions_df['actual_revenue'] = np.random.normal(50000, 10000, len(dates))
        contributions_df['predicted_revenue'] = np.random.normal(contributions_df['actual_revenue'], 5000)
        
        # Ajouter les contributions par canal
        for channel in channels:
            if channel == 'baseline':
                contributions_df['baseline_contribution'] = np.random.normal(30000, 5000, len(dates))
            else:
                contributions_df[f'{channel}_contribution'] = np.random.normal(5000, 1000, len(dates))
                contributions_df[f'{channel}_spend'] = np.random.normal(2000, 500, len(dates))
                contributions_df[f'{channel}_roi'] = contributions_df[f'{channel}_contribution'] / contributions_df[f'{channel}_spend']
        
        # G√©n√©rer des donn√©es de d√©mo pour l'allocation budg√©taire
        budget_data = []
        for channel in config['marketing_channels']:
            budget_data.append({
                'channel': channel,
                'budget': np.random.normal(10000, 2000),
                'budget_pct': 0,  # Sera calcul√© ci-dessous
                'roi': np.random.uniform(1.5, 4.0)
            })
        
        budget_df = pd.DataFrame(budget_data)
        total_budget = budget_df['budget'].sum()
        budget_df['budget_pct'] = budget_df['budget'] / total_budget * 100
        
        # G√©n√©rer des m√©triques de d√©mo
        metrics = {
            'r2': 0.85,
            'rmse': 5000,
            'mae': 4000,
            'mape': 8.5
        }
        
        st.success("Donn√©es de d√©mo charg√©es avec succ√®s!")

if page == "Vue d'ensemble":
    st.header("Vue d'ensemble du projet MMM")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("Qu'est-ce que le Marketing Mix Modeling?")
        st.write(
            """
            Le Marketing Mix Modeling (MMM) est une technique statistique qui analyse 
            l'impact des diff√©rentes activit√©s marketing sur les ventes. Elle permet de :
            
            - **Quantifier** l'efficacit√© de chaque canal marketing
            - **Mesurer** le retour sur investissement (ROI)
            - **Optimiser** l'allocation budg√©taire
            - **Pr√©voir** l'impact des futurs investissements marketing
            """
        )
        
        st.subheader("√Ä propos des donn√©es Online Retail")
        st.write(
            """
            Les donn√©es utilis√©es pour cette analyse proviennent du jeu de donn√©es 
            "Online Retail" disponible sur Kaggle. Il s'agit de donn√©es transactionnelles 
            d'un d√©taillant en ligne bas√© au Royaume-Uni, sp√©cialis√© dans les cadeaux.
            
            **Caract√©ristiques des donn√©es:**
            - P√©riode: D√©cembre 2010 √† D√©cembre 2011
            - ~500 000 transactions
            - ~4 000 clients uniques
            - ~4 000 produits uniques
            """
        )
    
    with col2:
        st.image("https://miro.medium.com/max/1200/1*6JgtnS-nglYMXmh32xqYxQ.png", 
                caption="Exemple de Marketing Mix Modeling")
    
    # Afficher les m√©triques du mod√®le si disponibles
    if metrics:
        st.subheader("Performance du mod√®le")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(label="R¬≤", value=f"{metrics['r2']:.3f}")
        
        with col2:
            st.metric(label="RMSE", value=f"{metrics['rmse']:.2f}")
        
        with col3:
            st.metric(label="MAE", value=f"{metrics['mae']:.2f}")
        
        with col4:
            st.metric(label="MAPE", value=f"{metrics['mape']:.2f}%")
    
    # Graphique des ventes au fil du temps
    st.subheader("√âvolution des ventes")
    if contributions_df is not None:
        fig, ax = plt.subplots(figsize=(12, 6))
        
        # Convertir les dates si n√©cessaire
        if not isinstance(contributions_df['date'].iloc[0], pd.Timestamp):
            contributions_df['date'] = pd.to_datetime(contributions_df['date'])
        contributions_df = contributions_df.sort_values('date')
        
        # Tracer les ventes r√©elles et pr√©dites
        ax.plot(contributions_df['date'], contributions_df['actual_revenue'], 
                label='Ventes r√©elles', color='blue')
        ax.plot(contributions_df['date'], contributions_df['predicted_revenue'], 
                label='Ventes pr√©dites', color='red', linestyle='--')
        
        # Formatage
        ax.set_xlabel('Date')
        ax.set_ylabel('Ventes (¬£)')
        ax.set_title('√âvolution des ventes - R√©elles vs Pr√©dites')
        ax.legend()
        ax.grid(True, alpha=0.3)
        plt.xticks(rotation=45)
        plt.tight_layout()
        
        st.pyplot(fig)
    else:
        st.info("Graphique non disponible. Veuillez d'abord ex√©cuter l'analyse MMM ou charger des donn√©es de d√©mo.")

elif page == "Analyse des contributions":
    st.header("Analyse des contributions par canal")
    
    if contributions_df is not None:
        # Pr√©parer les donn√©es
        channels = config['marketing_channels']
        contrib_cols = [f"{ch}_contribution" for ch in channels if f"{ch}_contribution" in contributions_df.columns]
        
        # Ajouter la contribution de base
        if 'baseline_contribution' in contributions_df.columns:
            contrib_cols.append('baseline_contribution')
        
        # Calculer les contributions moyennes
        avg_contribs = {}
        for col in contrib_cols:
            channel = col.replace('_contribution', '')
            avg_contribs[channel] = contributions_df[col].mean()
        
        # Cr√©er un DataFrame pour l'affichage
        contrib_df = pd.DataFrame({
            'Canal': list(avg_contribs.keys()),
            'Contribution moyenne (¬£)': list(avg_contribs.values()),
            # Utiliser max() pour √©viter les valeurs n√©gatives
            'Contribution (%)': [max(0, v / contributions_df['predicted_revenue'].mean() * 100) for v in avg_contribs.values()]
        }).sort_values('Contribution moyenne (¬£)', ascending=False)
        
        # Afficher le tableau
        st.subheader("Contributions moyennes par canal")
        st.dataframe(contrib_df.style.format({
            'Contribution moyenne (¬£)': '{:.2f}',
            'Contribution (%)': '{:.2f}%'
        }))
        
        # Graphique de r√©partition des contributions
        st.subheader("R√©partition des contributions")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Graphique √† barres
            fig, ax = plt.subplots(figsize=(10, 6))
            bars = ax.bar(contrib_df['Canal'], contrib_df['Contribution moyenne (¬£)'])
            
            # Ajouter les valeurs sur les barres
            for bar in bars:
                height = bar.get_height()
                ax.text(bar.get_x() + bar.get_width()/2., height + 5,
                        f'¬£{height:.0f}', ha='center', va='bottom', fontsize=10)
            
            ax.set_xlabel('Canal')
            ax.set_ylabel('Contribution moyenne (¬£)')
            ax.set_title('Contribution moyenne par canal marketing')
            plt.xticks(rotation=45)
            plt.tight_layout()
            
            st.pyplot(fig)
        
        with col2:
            # Graphique en camembert
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.pie(contrib_df['Contribution (%)'], labels=contrib_df['Canal'], autopct='%1.1f%%',
                   startangle=90, shadow=False)
            ax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
            ax.set_title('R√©partition des contributions (%)')
            plt.tight_layout()
            
            st.pyplot(fig)
        
        # Contributions dans le temps
        st.subheader("√âvolution des contributions dans le temps")
        
        # Pr√©parer les donn√©es
        if not isinstance(contributions_df['date'].iloc[0], pd.Timestamp):
            contributions_df['date'] = pd.to_datetime(contributions_df['date'])
        contributions_df = contributions_df.sort_values('date')
        
        # Agr√©ger par semaine pour une meilleure lisibilit√©
        contributions_df['week'] = contributions_df['date'].dt.isocalendar().week
        contributions_df['year'] = contributions_df['date'].dt.year
        
        weekly_contribs = contributions_df.groupby(['year', 'week']).agg({
            'date': 'first',
            **{col: 'mean' for col in contrib_cols}
        }).reset_index()
        
        # Tracer les contributions dans le temps
        fig, ax = plt.subplots(figsize=(12, 6))
        
        for col in contrib_cols:
            channel = col.replace('_contribution', '')
            ax.plot(weekly_contribs['date'], weekly_contribs[col], label=channel, linewidth=2)
        
        ax.set_xlabel('Date')
        ax.set_ylabel('Contribution (¬£)')
        ax.set_title('√âvolution des contributions par canal')
        ax.legend(title='Canal', bbox_to_anchor=(1.05, 1), loc='upper left')
        ax.grid(True, alpha=0.3)
        plt.xticks(rotation=45)
        plt.tight_layout()
        
        st.pyplot(fig)
    else:
        st.info("Donn√©es de contribution non disponibles. Veuillez d'abord ex√©cuter l'analyse MMM ou charger des donn√©es de d√©mo.")

elif page == "Allocation budg√©taire":
    st.header("Optimisation de l'allocation budg√©taire")
    
    if budget_df is not None and contributions_df is not None:
        # Pr√©parer les donn√©es
        roi_data = {}
        for channel in config['marketing_channels']:
            roi_col = f"{channel}_roi"
            if roi_col in contributions_df.columns:
                roi_data[channel] = contributions_df[roi_col].median()
        
        # Cr√©er un DataFrame pour l'affichage du ROI
        roi_df = pd.DataFrame({
            'Canal': list(roi_data.keys()),
            'ROI m√©dian': list(roi_data.values())
        }).sort_values('ROI m√©dian', ascending=False)
        
        # Afficher les ROI
        st.subheader("Retour sur investissement (ROI) par canal")
        st.dataframe(roi_df.style.format({
            'ROI m√©dian': '{:.2f}'
        }))
        
        # Graphique du ROI
        fig, ax = plt.subplots(figsize=(10, 6))
        bars = ax.bar(roi_df['Canal'], roi_df['ROI m√©dian'])
        
        # Ajouter les valeurs sur les barres
        for bar in bars:
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2., height + 0.05,
                    f'{height:.2f}', ha='center', va='bottom', fontsize=10)
        
        ax.set_xlabel('Canal')
        ax.set_ylabel('ROI (¬£ g√©n√©r√©s par ¬£ d√©pens√©e)')
        ax.set_title('ROI m√©dian par canal marketing')
        plt.xticks(rotation=45)
        plt.tight_layout()
        
        st.pyplot(fig)
        
        # Allocation budg√©taire optimis√©e
        st.subheader("Allocation budg√©taire optimis√©e")
        
        # Renommer les colonnes pour une meilleure pr√©sentation
        budget_display = budget_df.copy()
        if 'channel' in budget_display.columns:
            budget_display = budget_display.rename(columns={
                'channel': 'Canal',
                'budget': 'Budget (¬£)',
                'budget_pct': 'Budget (%)',
                'roi': 'ROI'
            })
            
            # Afficher le tableau
            st.dataframe(budget_display.style.format({
                'Budget (¬£)': '¬£{:.2f}',
                'Budget (%)': '{:.2f}%',
                'ROI': '{:.2f}'
            }))
            
            # Graphique d'allocation
            fig, ax1 = plt.subplots(figsize=(12, 6))
            
            x = budget_display['Canal']
            y1 = budget_display['Budget (¬£)']
            
            # Graphique en barres pour le budget
            bars = ax1.bar(x, y1, color='skyblue')
            
            # Ajouter les valeurs sur les barres
            for bar in bars:
                height = bar.get_height()
                ax1.text(bar.get_x() + bar.get_width()/2., height + 500,
                        f'¬£{height:.0f}', ha='center', va='bottom', fontsize=10)
            
            ax1.set_xlabel('Canal')
            ax1.set_ylabel('Budget allou√© (¬£)', color='skyblue')
            ax1.tick_params(axis='y', labelcolor='skyblue')
            
            # Cr√©er un deuxi√®me axe Y pour le ROI
            ax2 = ax1.twinx()
            ax2.plot(x, budget_display['ROI'], 'ro-', linewidth=2)
            ax2.set_ylabel('ROI', color='red')
            ax2.tick_params(axis='y', labelcolor='red')
            
            plt.title('Allocation budg√©taire optimis√©e et ROI par canal')
            plt.xticks(rotation=45)
            plt.tight_layout()
            
            st.pyplot(fig)
            
            # T√©l√©chargement des r√©sultats
            st.download_button(
                label="T√©l√©charger l'allocation budg√©taire (CSV)",
                data=budget_display.to_csv(index=False).encode('utf-8'),
                file_name='allocation_budgetaire_optimisee.csv',
                mime='text/csv',
            )
    else:
        st.info("Donn√©es d'allocation budg√©taire non disponibles. Veuillez d'abord ex√©cuter l'analyse MMM ou charger des donn√©es de d√©mo.")

elif page == "Simulateur":
    st.header("Simulateur d'allocation budg√©taire")
    
    if budget_df is not None and contributions_df is not None:
        st.write("""
        Ce simulateur vous permet d'explorer diff√©rents sc√©narios d'allocation budg√©taire
        et d'estimer leur impact sur les ventes.
        """)
        
        # Obtenir le budget total de base
        default_total_budget = budget_df['budget'].sum() if 'budget' in budget_df.columns else 100000
        
        # Input pour le budget total
        total_budget = st.slider(
            "Budget marketing total (¬£)",
            min_value=int(default_total_budget * 0.5),
            max_value=int(default_total_budget * 2),
            value=int(default_total_budget),
            step=5000
        )
        
        # Pr√©parer les donn√©es pour le simulateur
        channels = config['marketing_channels']
        
        # Calculer les ROI m√©dians par canal
        roi_data = {}
        for channel in channels:
            roi_col = f"{channel}_roi"
            if roi_col in contributions_df.columns:
                roi_data[channel] = contributions_df[roi_col].median()
        
        # Extraire les allocations par d√©faut
        default_allocations = {}
        if 'channel' in budget_df.columns and 'budget_pct' in budget_df.columns:
            for _, row in budget_df.iterrows():
                channel = row['channel']
                if channel in channels:
                    default_allocations[channel] = row['budget_pct']
        
        # Si pas d'allocations par d√©faut, r√©partir √©quitablement
        if not default_allocations:
            for channel in channels:
                default_allocations[channel] = 100 / len(channels)
        
        # Options d'optimisation
        st.subheader("Options de simulation")
        optimisation_objective = st.selectbox(
            "Objectif d'optimisation",
            ["Maximiser les ventes", "Maximiser le ROI", "√âquilibrer ventes et ROI"]
        )
        
        # Afficher les sliders pour ajuster l'allocation
        st.subheader("Ajuster l'allocation budg√©taire (%)")
        
        # Option de r√©initialisation
        reset_allocations = st.button("R√©initialiser aux valeurs optimales")
        
        allocations = {}
        col1, col2 = st.columns(2)
        
        for i, channel in enumerate(channels):
            default = default_allocations.get(channel, 100 / len(channels))
            # R√©initialiser si le bouton est press√©
            if reset_allocations:
                value = float(default)
            else:
                value = st.session_state.get(f"allocation_{channel}", float(default))
                
            with col1 if i < len(channels) / 2 else col2:
                allocations[channel] = st.slider(
                    f"{channel}",
                    min_value=0.0,
                    max_value=100.0,
                    value=value,
                    key=f"allocation_{channel}",
                    step=0.5,
                    format="%.1f%%"
                )
        
        # Normaliser les allocations pour qu'elles somment √† 100%
        total_allocation = sum(allocations.values())
        if total_allocation > 0:
            allocation_factor = 100 / total_allocation
            for channel in allocations:
                allocations[channel] = allocations[channel] * allocation_factor
        
        # Calculer les budgets par canal
        budgets = {channel: (allocation / 100) * total_budget for channel, allocation in allocations.items()}
        
        # Calculer l'impact estim√© sur les ventes
        estimated_contributions = {}
        baseline_contribution = contributions_df['baseline_contribution'].mean() if 'baseline_contribution' in contributions_df.columns else 0
        
        total_contribution = baseline_contribution
        for channel, budget in budgets.items():
            roi = roi_data.get(channel, 0)
            channel_contribution = budget * roi
            estimated_contributions[channel] = channel_contribution
            total_contribution += channel_contribution
        
        # Cr√©er un DataFrame pour l'affichage des r√©sultats
        results_df = pd.DataFrame({
            'Canal': list(budgets.keys()),
            'Budget (¬£)': list(budgets.values()),
            'Budget (%)': [allocation for allocation in allocations.values()],
            'ROI': [roi_data.get(channel, 0) for channel in budgets.keys()],
            'Contribution estim√©e (¬£)': [estimated_contributions[channel] for channel in budgets.keys()]
        })
        
        # Ajouter la ligne de base
        results_df = pd.concat([
            results_df,
            pd.DataFrame({
                'Canal': ['Baseline'],
                'Budget (¬£)': [0],
                'Budget (%)': [0],
                'ROI': [0],
                'Contribution estim√©e (¬£)': [baseline_contribution]
            })
        ]).reset_index(drop=True)
        
        # Afficher les r√©sultats
        st.subheader("R√©sultats de la simulation")
        
        # M√©triques principales
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                label="Budget total",
                value=f"¬£{total_budget:,.2f}"
            )
        
        with col2:
            st.metric(
                label="Contribution marketing",
                value=f"¬£{(total_contribution - baseline_contribution):,.2f}"
            )
        
        with col3:
            st.metric(
                label="Ventes totales",
                value=f"¬£{total_contribution:,.2f}"
            )
            
        with col4:
            average_roi = sum(estimated_contributions.values()) / total_budget if total_budget > 0 else 0
            st.metric(
                label="ROI global",
                value=f"{average_roi:.2f}"
            )
        
        # Tableau d√©taill√©
        st.dataframe(results_df.style.format({
            'Budget (¬£)': '¬£{:,.2f}',
            'Budget (%)': '{:.2f}%',
            'ROI': '{:.2f}',
            'Contribution estim√©e (¬£)': '¬£{:,.2f}'
        }))
        
        # Graphique des contributions estim√©es
        fig, ax = plt.subplots(figsize=(10, 6))
        
        # Exclure la baseline pour une meilleure visualisation
        plot_df = results_df[results_df['Canal'] != 'Baseline']
        
        bars = ax.bar(plot_df['Canal'], plot_df['Contribution estim√©e (¬£)'])
        
        # Ajouter les valeurs sur les barres
        for bar in bars:
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2., height + 50,
                    f'¬£{height:,.0f}', ha='center', va='bottom', fontsize=10)
        
        ax.set_xlabel('Canal')
        ax.set_ylabel('Contribution estim√©e (¬£)')
        ax.set_title('Contribution estim√©e par canal marketing')
        plt.xticks(rotation=45)
        plt.tight_layout()
        
        st.pyplot(fig)
        
        # T√©l√©chargement des r√©sultats de simulation
        st.download_button(
            label="T√©l√©charger les r√©sultats de simulation (CSV)",
            data=results_df.to_csv(index=False).encode('utf-8'),
            file_name='simulation_allocation_budgetaire.csv',
            mime='text/csv',
        )
        
        # Historique des simulations
        if 'simulation_history' not in st.session_state:
            st.session_state.simulation_history = []
        
        # Bouton pour sauvegarder la simulation actuelle
        if st.button("Sauvegarder cette simulation"):
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            simulation_data = {
                'timestamp': timestamp,
                'budget_total': total_budget,
                'ventes_estimees': total_contribution,
                'roi_global': average_roi,
                'allocations': allocations.copy()
            }
            st.session_state.simulation_history.append(simulation_data)
            st.success(f"Simulation sauvegard√©e: {timestamp}")
        
        # Afficher l'historique des simulations
        if st.session_state.simulation_history:
            st.subheader("Historique des simulations")
            history_df = pd.DataFrame([
                {
                    'Date': sim['timestamp'],
                    'Budget total (¬£)': f"¬£{sim['budget_total']:,.2f}",
                    'Ventes estim√©es (¬£)': f"¬£{sim['ventes_estimees']:,.2f}",
                    'ROI global': f"{sim['roi_global']:.2f}"
                } 
                for sim in st.session_state.simulation_history
            ])
            st.dataframe(history_df)
            
            # Comparaison des simulations
            if len(st.session_state.simulation_history) > 1:
                st.subheader("Comparaison des simulations")
                
                # Tracer l'√©volution des ventes estim√©es
                fig, ax = plt.subplots(figsize=(10, 6))
                data_to_plot = [
                    (sim['timestamp'], sim['ventes_estimees']) 
                    for sim in st.session_state.simulation_history
                ]
                timestamps, values = zip(*data_to_plot)
                
                ax.plot(range(len(timestamps)), values, 'o-', linewidth=2)
                ax.set_xlabel('Simulation')
                ax.set_ylabel('Ventes estim√©es (¬£)')
                ax.set_title('√âvolution des ventes estim√©es par simulation')
                ax.set_xticks(range(len(timestamps)))
                ax.set_xticklabels([f"Sim {i+1}" for i in range(len(timestamps))], rotation=45)
                ax.grid(True, alpha=0.3)
                plt.tight_layout()
                
                st.pyplot(fig)
    else:
        st.info("Donn√©es requises non disponibles pour le simulateur. Veuillez d'abord ex√©cuter l'analyse MMM ou charger des donn√©es de d√©mo.")

elif page == "√Ä propos":
    st.header("√Ä propos du projet")
    
    st.write("""
    ## Marketing Mix Modeling (MMM)
    
    Ce projet impl√©mente une analyse de Marketing Mix Modeling (MMM) compl√®te pour 
    optimiser l'allocation budg√©taire marketing en utilisant les donn√©es Online Retail.
    
    ### M√©thodologie
    
    Le MMM utilise des techniques statistiques avanc√©es pour d√©composer les ventes et 
    quantifier l'impact de chaque canal marketing. Notre approche comprend :
    
    1. **Pr√©traitement des donn√©es** : Nettoyage, agr√©gation et pr√©paration des donn√©es
    2. **Mod√©lisation des effets retard√©s** : Utilisation de transformations d'adstock pour 
       capturer les effets √† long terme des campagnes marketing
    3. **Mod√©lisation des effets de saturation** : Utilisation de transformations non lin√©aires 
       pour mod√©liser les rendements d√©croissants
    4. **Mod√©lisation avanc√©e** : Utilisation d'algorithmes comme LightGBM pour capturer 
       les relations complexes et non lin√©aires
    5. **Optimisation budg√©taire** : Utilisation d'algorithmes d'optimisation pour maximiser le ROI
    
    ### Limites de l'analyse
    
    - Les d√©penses marketing sont simul√©es car les donn√©es r√©elles ne sont pas disponibles
    - Certains facteurs externes peuvent ne pas √™tre pris en compte
    - Les effets synergiques entre canaux sont difficiles √† capturer parfaitement
    
    ### R√©f√©rences
    
    - [Facebook/Meta Robyn](https://github.com/facebookexperimental/Robyn)
    - [Google's MMM Python Library](https://github.com/google/lightweight_mmm)
    - Jin, Y., Wang, Y., Sun, Y., Chan, D., & Koehler, J. (2017). Bayesian Methods for Media Mix Modeling with Carryover and Shape Effects.
    """)
    
    st.subheader("Contact")
    st.write("""
    Pour toute question ou suggestion concernant ce projet, veuillez contacter :
    - **Nom** : Samir Elaissaouy
    - **Email** : elaissaouy.samir12@gmail.com
    - **GitHub** : [github.com/samirelais](https://github.com/samirelais)
    """)
    
    # Ajouter une section FAQ
    st.subheader("FAQ")
    
    faq_data = [
        ("Qu'est-ce que l'effet d'adstock?", 
         "L'effet d'adstock est le ph√©nom√®ne par lequel l'impact des d√©penses marketing se poursuit au-del√† de la p√©riode initiale. Il capture l'effet de persistance ou de m√©moire des campagnes marketing."),
        
        ("Comment interpr√©ter le ROI?", 
         "Le ROI (Return on Investment) mesure le rendement g√©n√©r√© pour chaque unit√© mon√©taire d√©pens√©e. Par exemple, un ROI de 2.5 signifie que pour chaque ¬£1 d√©pens√©e, vous g√©n√©rez ¬£2.50 de revenus."),
        
        ("Comment le mod√®le g√®re-t-il la saisonnalit√©?", 
         "Le mod√®le capture la saisonnalit√© en incluant des variables indicatrices pour les p√©riodes pertinentes (mois, jours de la semaine) et en identifiant les tendances cycliques dans les donn√©es."),
        
        ("Comment puis-je am√©liorer la pr√©cision du mod√®le?", 
         "Pour am√©liorer la pr√©cision, vous pouvez : 1) inclure plus de donn√©es historiques, 2) ajouter des variables exog√®nes pertinentes, 3) affiner les param√®tres d'adstock et de saturation, ou 4) exp√©rimenter avec diff√©rents algorithmes de mod√©lisation.")
    ]
    
    for question, answer in faq_data:
        with st.expander(question):
            st.write(answer)
  

    col1, col2 = st.columns(2)

    with col1:
        if st.button("T√©l√©charger le guide MMM"):
            with st.spinner('G√©n√©ration du guide en cours...'):
                pdf_guide = generate_mmm_guide()
                if pdf_guide:
                    st.success("Guide g√©n√©r√© avec succ√®s!")
                    st.download_button(
                        label="T√©l√©charger le Guide MMM (PDF)",
                        data=pdf_guide,
                        file_name="guide_mmm.pdf",
                        mime="application/pdf"
                    )

# Fonction pour le tutoriel
def show_tutorial():
    tutorial_steps = [
        {
            "title": "Bienvenue sur le Dashboard MMM!",
            "text": "Ce tutoriel rapide vous guidera √† travers les fonctionnalit√©s principales de l'application.",
            "element": "header",
        },
        {
            "title": "Navigation",
            "text": "Utilisez le menu de navigation pour explorer les diff√©rentes sections du dashboard.",
            "element": ".stSelectbox",
        },
        {
            "title": "Ex√©cuter l'analyse",
            "text": "Cliquez sur ce bouton pour ex√©cuter ou mettre √† jour l'analyse MMM.",
            "element": "button[data-baseweb='button']:contains('Ex√©cuter l'analyse MMM')",
        },
        {
            "title": "Simulateur",
            "text": "Explorez diff√©rents sc√©narios d'allocation budg√©taire pour maximiser vos ventes.",
            "element": "div:contains('Simulateur d'allocation budg√©taire')",
        },
        {
            "title": "T√©l√©chargement",
            "text": "T√©l√©chargez les r√©sultats pour les utiliser dans d'autres outils comme Excel.",
            "element": "button:contains('T√©l√©charger')",
        },
        {
            "title": "Besoin d'aide?",
            "text": "Consultez la section FAQ dans la page '√Ä propos' pour des r√©ponses aux questions courantes.",
            "element": "div:contains('FAQ')",
        },
    ]

    # Cette fonction est un placeholder - la mise en ≈ìuvre effective d'un tutoriel 
    # n√©cessiterait une biblioth√®que JavaScript comme Intro.js int√©gr√©e √† Streamlit
    st.info("Fonctionnalit√© de tutoriel √† impl√©menter dans une version future.")

# Ajouter un bouton de tutoriel dans la sidebar
if st.sidebar.button("Tutoriel"):
    show_tutorial()

# Ajouter une option pour t√©l√©charger un rapport complet
st.sidebar.markdown("---")
st.sidebar.subheader("Rapports")
if st.sidebar.button("G√©n√©rer un rapport complet"):
    if contributions_df is not None and budget_df is not None and metrics is not None:
        try:
            # Cr√©er un buffer pour stocker le PDF
            buffer = io.BytesIO()
            
            # Cr√©er le document PDF
            doc = SimpleDocTemplate(buffer, pagesize=letter)
            elements = []
            
            # Styles
            styles = getSampleStyleSheet()
            title_style = styles['Heading1']
            subtitle_style = styles['Heading2']
            normal_style = styles['Normal']
            
            # Titre principal
            elements.append(Paragraph("Rapport Marketing Mix Modeling", title_style))
            elements.append(Spacer(1, 0.2*inch))
            elements.append(Paragraph(f"Date: {datetime.now().strftime('%d/%m/%Y')}", normal_style))
            elements.append(Spacer(1, 0.5*inch))
            
            # M√©triques du mod√®le
            elements.append(Paragraph("Performance du mod√®le", subtitle_style))
            
            # Cr√©er un tableau pour les m√©triques
            metrics_data = [["M√©trique", "Valeur"],
                           ["R¬≤", f"{metrics['r2']:.3f}"],
                           ["RMSE", f"{metrics['rmse']:.2f}"],
                           ["MAE", f"{metrics['mae']:.2f}"],
                           ["MAPE", f"{metrics['mape']:.2f}%"]]
            
            metrics_table = Table(metrics_data, colWidths=[2*inch, 2*inch])
            metrics_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (1, 0), colors.lightblue),
                ('TEXTCOLOR', (0, 0), (1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            
            elements.append(metrics_table)
            elements.append(Spacer(1, 0.3*inch))
            
            # Contributions par canal
            elements.append(Paragraph("Contributions par canal", subtitle_style))
            
            # Pr√©parer les donn√©es de contribution
            channels = config['marketing_channels']
            contrib_cols = [f"{ch}_contribution" for ch in channels if f"{ch}_contribution" in contributions_df.columns]
            if 'baseline_contribution' in contributions_df.columns:
                contrib_cols.append('baseline_contribution')
                
            # Calculer les contributions moyennes
            avg_contribs = {}
            for col in contrib_cols:
                channel = col.replace('_contribution', '')
                avg_contribs[channel] = contributions_df[col].mean()
            
            total_revenue = contributions_df['predicted_revenue'].mean()
                
            # Cr√©er un tableau pour les contributions
            contrib_data = [["Canal", "Contribution (¬£)", "Pourcentage (%)"]]
            for channel, value in avg_contribs.items():
                pct = max(0, value / total_revenue * 100)
                contrib_data.append([channel, f"{value:.2f}", f"{pct:.2f}%"])
            
            contrib_table = Table(contrib_data, colWidths=[2*inch, 2*inch, 2*inch])
            contrib_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            
            elements.append(contrib_table)
            elements.append(Spacer(1, 0.3*inch))
            
            # Allocation budg√©taire
            elements.append(Paragraph("Allocation budg√©taire optimis√©e", subtitle_style))
            
            if 'channel' in budget_df.columns:
                # Cr√©er un tableau pour l'allocation budg√©taire
                budget_data = [["Canal", "Budget (¬£)", "Budget (%)", "ROI"]]
                for _, row in budget_df.iterrows():
                    budget_data.append([
                        row['channel'],
                        f"{row['budget']:.2f}",
                        f"{row['budget_pct']:.2f}%",
                        f"{row['roi']:.2f}"
                    ])
                
                budget_table = Table(budget_data, colWidths=[1.5*inch, 1.5*inch, 1.5*inch, 1.5*inch])
                budget_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                    ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                    ('GRID', (0, 0), (-1, -1), 1, colors.black)
                ]))
                
                elements.append(budget_table)
            else:
                elements.append(Paragraph("Donn√©es d'allocation budg√©taire non disponibles.", normal_style))
            
            elements.append(Spacer(1, 0.3*inch))
                        
            # Recommandations
            elements.append(Paragraph("Recommandations", subtitle_style))
            elements.append(Spacer(1, 0.2*inch))
            
            best_roi_channel = "N/A"
            if 'channel' in budget_df.columns and 'roi' in budget_df.columns and not budget_df.empty:
                best_roi_channel = budget_df.loc[budget_df['roi'].idxmax()]['channel']
            
            # D√©finir un style de paragraphe personnalis√© pour le texte de recommandation
            reco_style = ParagraphStyle(
                'RecoStyle',
                parent=normal_style,
                leftIndent=20,
                rightIndent=20,
                spaceBefore=10,
                spaceAfter=10,
                leading=14  # Espace entre les lignes
            )
            
            # Titre des recommandations
            elements.append(Paragraph("Bas√© sur notre analyse, voici nos recommandations:", normal_style))
            elements.append(Spacer(1, 0.1*inch))
            
            # Ajouter chaque recommandation comme un paragraphe s√©par√©
            elements.append(Paragraph(f"1. Le canal '{best_roi_channel}' pr√©sente le meilleur ROI et devrait √™tre privil√©gi√©.", reco_style))
            elements.append(Paragraph("2. L'allocation budg√©taire optimis√©e pr√©sent√©e dans ce rapport permettrait d'am√©liorer le retour sur investissement global.", reco_style))
            elements.append(Paragraph("3. Une r√©vision trimestrielle de l'allocation est recommand√©e pour s'adapter aux √©volutions du march√©.", reco_style))
            elements.append(Paragraph("4. Des tests A/B devraient √™tre conduits pour valider empiriquement l'efficacit√© des diff√©rents canaux.", reco_style))
            
            # G√©n√©rer le PDF
            doc.build(elements)
            
            # T√©l√©charger le PDF
            st.sidebar.success("Rapport g√©n√©r√© avec succ√®s!")
            st.sidebar.download_button(
                label="T√©l√©charger le rapport PDF",
                data=buffer.getvalue(),
                file_name="rapport_mmm.pdf",
                mime="application/pdf"
            )
            
        except Exception as e:
            st.sidebar.error(f"Erreur lors de la g√©n√©ration du rapport: {e}")
    else:
        st.sidebar.warning("Donn√©es non disponibles pour g√©n√©rer un rapport.")